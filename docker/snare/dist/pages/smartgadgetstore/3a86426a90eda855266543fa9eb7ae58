import os
import hashlib
import json
import mimetypes
import shutil

# Set the directory to your website's root folder
WEB_DIR = "C:/Users/cpalo/Desktop/University_Denmark/year2/spring_semester/MASTER_THESIS/FreeWebsiteTemplate/Webpage/"
CLONE_DIR = os.path.join(WEB_DIR, "WEBPAGE_hashed_copy")  # Directory for cloned files

# Ensure clone directory exists
os.makedirs(CLONE_DIR, exist_ok=True)

# Function to calculate MD5 hash of a file
def md5_hash(file_path):
    hasher = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hasher.update(chunk)
    return hasher.hexdigest()

# Dictionary to store file metadata
meta_data = {}

# Walk through the original directory
for root, _, files in os.walk(WEB_DIR):
    for file in files:
        original_path = os.path.join(root, file)

        # Skip files in the hashed_copy directory
        if CLONE_DIR in original_path:
            continue

        # Generate relative path (for meta.json)
        rel_path = "/" + os.path.relpath(original_path, WEB_DIR).replace("\\", "/")

        # Calculate MD5 hash
        file_hash = md5_hash(original_path)

        # Get MIME type
        content_type, _ = mimetypes.guess_type(original_path)
        if content_type is None:
            content_type = "application/octet-stream"

        # Define new filename (hash only, no extension)
        new_filename = file_hash
        new_filepath = os.path.join(CLONE_DIR, new_filename)

        # Copy and rename the file
        shutil.copy2(original_path, new_filepath)

        # Add entry to meta.json (excluding reference to meta.json itself)
        if file != "meta.json":
            meta_data[rel_path] = {
                "hash": file_hash,
                "content_type": content_type
            }

        print(f"Copied & renamed: {original_path} â†’ {new_filepath}")

# Create a dummy 404 page if not present
status_404_path = os.path.join(WEB_DIR, "status_404.html")
if not os.path.exists(status_404_path):
    with open(status_404_path, "w") as f:
        f.write("<h1>404 Not Found</h1>")

    file_hash_404 = md5_hash(status_404_path)
    shutil.copy2(status_404_path, os.path.join(CLONE_DIR, file_hash_404))

    meta_data["/status_404"] = {
        "hash": file_hash_404,
        "content_type": "text/html"
    }

    print(f"Created and added 404 file with hash {file_hash_404}")

# Save the meta.json inside the clone directory
meta_file = os.path.join(CLONE_DIR, "meta.json")
with open(meta_file, "w") as f:
    json.dump(meta_data, f, indent=4, sort_keys=True)

print(f"Meta file created: {meta_file}")
