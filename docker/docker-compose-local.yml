networks:
  tanner_local:
    driver: bridge

volumes:
  shared_logs:
    driver: local
  ollama_data:
    driver: local

services:

# Tanner Redis Service
  tanner_redis:
    build: ./redis
    container_name: tanner_redis
    restart: on-failure
    stop_signal: SIGKILL
    tty: true
    networks:
     - tanner_local
    image: "dtagdevsec/redis:24.04"
    read_only: true

# PHP Sandbox service
  tanner_phpox:
    build: ./phpox
    container_name: tanner_phpox
    restart: on-failure
    stop_signal: SIGKILL
    tmpfs:
     - /tmp:uid=2000,gid=2000
    tty: true
    networks:
     - tanner_local
    image: "dtagdevsec/phpox:24.04"
    read_only: true

# Tanner Service
  tanner:
    build: 
      context: ../
      dockerfile: docker/tanner/Dockerfile
    container_name: tanner
    restart: on-failure
    stop_signal: SIGKILL
    tty: true
    networks:
     - tanner_local
    image: "dtagdevsec/tanner:24.04"
    command: tanner
    privileged: true
    volumes:
     - shared_logs:/var/log/tanner
     - $HOME/files/tanner:/opt/tanner/files
    depends_on:
     - tanner_phpox

  # Log Interface Service
  log-interface:
    image: python:3.9-slim
    container_name: logging
    restart: on-failure
    networks:
      - tanner_local
    ports:
      - "5003:5003"
    volumes:
      - shared_logs:/shared_logs
      - ../logging:/app
      - ./webhooks.json:/app/webhooks.json
    environment:
      - PYTHONPATH=/app  # Add this line to set the Python module search path
    command: >
      sh -c "pip install flask requests gunicorn && gunicorn -w 4 -b 0.0.0.0:5003 log_interface:app"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:5003/"]
      interval: 10s
      timeout: 5s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    networks:
      - tanner_local
    ports:
      - "11434:11434"              # Ollamaâ€™s default API port
    volumes:
      - ollama_data:/root/.ollama # persist downloaded models
    command: ["serve"]             # start the HTTP API

# Snare Service
  snare:
    environment:
      - IS_LOCAL=true
      - OLLAMA_HOST=ollama
      - OLLAMA_PORT=11434
    build: 
      context: ../
      dockerfile: docker/snare/Dockerfile
    container_name: snare
    restart: on-failure
    stop_signal: SIGKILL
    tty: true
    networks:
     - tanner_local
    ports:
     - "443:443"
    image: "dtagdevsec/snare:24.04"
    depends_on:
    - tanner
    - log-interface
    - ollama
    volumes:
     - shared_logs:/var/log/snare
     - $HOME/credentials.xlsx:/opt/snare/files/credentials.xlsx
     - ./snare/dist/honeytokens:/opt/snare/honeytokens
