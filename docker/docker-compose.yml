networks:
  tanner_local:
  elk_local:

services:

# Tanner Redis Service
  tanner_redis:
    build: ./redis
    container_name: tanner_redis
    restart: on-failure
    stop_signal: SIGKILL
    tty: true
#    cpu_count: 1
#    cpus: 0.25
    networks:
     - tanner_local
    image: "dtagdevsec/redis:24.04"
    read_only: true

# PHP Sandbox service
  tanner_phpox:
    build: ./phpox
    container_name: tanner_phpox
    restart: on-failure
    stop_signal: SIGKILL
    tmpfs:
     - /tmp:uid=2000,gid=2000
    tty: true
#    cpu_count: 1
#    cpus: 0.25
    networks:
     - tanner_local
    image: "dtagdevsec/phpox:24.04"
    read_only: true

# Tanner API Service
  tanner_api:
    build:
      context: ../
      dockerfile: docker/tanner/Dockerfile
    container_name: tanner_api
    restart: on-failure
    stop_signal: SIGKILL
    tmpfs:
     - /tmp/tanner:uid=2000,gid=2000
    tty: true
#    cpu_count: 1
#    cpus: 0.25
    networks:
     - tanner_local
    image: "dtagdevsec/tanner:24.04"
    read_only: true
    volumes:
     - $HOME/tpotce/data/tanner/log:/var/log/tanner
    command: tannerapi 
    depends_on:
     - tanner_redis

# Tanner WEB Service
#  tanner_web:
#    build: ./tanner
#    container_name: tanner_web
#    restart: always
#    stop_signal: SIGKILL
#    tmpfs:
#     - /tmp/tanner:uid=2000,gid=2000
#    tty: true
#    networks:
#     - tanner_local
#    ports:
#     - "127.0.0.1:8091:8091"
#    image: "dtagdevsec/tanner:24.04"
#    command: tannerweb
#    read_only: true
#    volumes:
#     - /data/tanner/log:/var/log/tanner
#    depends_on:
#     - tanner_redis

# Tanner Service
  tanner:
    build: 
      context: ../
      dockerfile: docker/tanner/Dockerfile
    container_name: tanner
    restart: on-failure
    stop_signal: SIGKILL
    tmpfs:
     - /tmp/tanner:uid=2000,gid=2000
    tty: true
#    cpu_count: 1
#    cpus: 0.25
    networks:
     - tanner_local
    image: "dtagdevsec/tanner:24.04"
    command: tanner
    read_only: true
    volumes:
     - $HOME/tpotce/data/tanner/log:/var/log/tanner
     - $HOME/tpotce/data/tanner/files:/opt/tanner/files
    depends_on:
     - tanner_api
#     - tanner_web
     - tanner_phpox

# Snare Service
  snare:
    build: 
      context: ../
      dockerfile: docker/snare/Dockerfile
    container_name: snare
    restart: on-failure
    stop_signal: SIGKILL
    tty: true
#    cpu_count: 1
#    cpus: 0.25
    networks:
     - tanner_local
    ports:
     - "80:80"
    image: "dtagdevsec/snare:24.04"
    depends_on:
     - tanner
    volumes:
     - $HOME/credentials.xlsx:/opt/snare/files/credentials.xlsx
     - ./snare/dist/honeytokens:/opt/snare/honeytokens

  ## Elasticsearch service
  elasticsearch:
    build: elasticsearch/.
    container_name: elasticsearch
    restart: always
    networks:
      - elk_local
    environment:
     - bootstrap.memory_lock=true
     - ES_JAVA_OPTS=-Xms2048m -Xmx2048m
     - ES_TMPDIR=/tmp
    cap_add:
     - IPC_LOCK
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    mem_limit: 4g
    tmpfs:
    - /tmp:rw,size=2g
    ports:
     - "127.0.0.1:64298:9200"
    image: "dtagdevsec/elasticsearch:24.04"
    volumes:
     - $HOME/tpotce/data:/data

## Kibana service
  kibana:
    build: kibana/.
    container_name: kibana
    restart: always
    networks:
      - elk_local
    stop_signal: SIGKILL
    depends_on:
      elasticsearch:
        condition: service_healthy
    mem_limit: 1g
    ports:
     - "127.0.0.1:64296:5601"
    image: "dtagdevsec/kibana:24.04"
    tmpfs:
    - /tmp:rw,size=2g

## Logstash service
  logstash:
    build: logstash/.
    container_name: logstash
    restart: always
    networks:
      - elk_local
#    environment:
#     - LS_JAVA_OPTS=-Xms2048m -Xmx2048m
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: "dtagdevsec/logstash:24.04"
    volumes:
     - $HOME/tpotce/data:/data
#     - /root/tpotce/docker/elk/logstash/dist/logstash.conf:/etc/logstash/conf.d/logstash.conf

# Map Redis Service
  map_redis:
    container_name: map_redis
    restart: always
    stop_signal: SIGKILL
    networks:
      - elk_local
    tty: true
    ports:
      - "127.0.0.1:6379:6379"
    image: "dtagdevsec/redis:24.04"
    read_only: true

# Map Web Service
  map_web:
    build: map/.
    container_name: map_web
    restart: always
    networks:
      - elk_local
    environment:
     - MAP_COMMAND=AttackMapServer.py
    stop_signal: SIGKILL
    tty: true
    ports:
     - "127.0.0.1:64299:64299"
    image: "dtagdevsec/map:24.04"
    depends_on:
     - map_redis

# Map Data Service
  map_data:
    container_name: map_data
    restart: always
    networks:
      - elk_local
    environment:
     - MAP_COMMAND=DataServer_v2.py
    stop_signal: SIGKILL
    tty: true
    image: "dtagdevsec/map:24.04"
    depends_on:
     - map_redis
